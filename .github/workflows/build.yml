name: Build WinSparkle

on:
  repository_dispatch:
    types:
      - webhook-1
      - webhook-2
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build DLL
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64]
        configuration: [Debug, Release]  # 添加构建配置矩阵
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up variables
      id: vars
      shell: powershell
      run: |
        if ('${{ matrix.configuration }}' -eq 'Debug') {
          "CONFIG_SHORT=dbg" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
          "CONFIG_SHORT=rel" | Out-File -FilePath $env:GITHUB_ENV -Append
        }


    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore dependency packages
      run: nuget restore

    # - name: Build binaries
    #   run: msbuild -m -t:Build -p:Configuration=Release -p:Platform=${{ matrix.platform }} WinSparkle.sln

    - name: Build with MSBuild
      run: msbuild -m -t:Build -p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} WinSparkle.sln

    - name: Archive binaries
      uses: actions/upload-artifact@v4
      with:
        name: winsparkle-binaries-${{ env.CONFIG_SHORT }}-${{ matrix.platform }}
        path: |
          include/winsparkle*.h
          ${{matrix.platform }}/${{ matrix.configuration }}/*.dll
          ${{matrix.platform }}/${{ matrix.configuration }}/*.lib
          ${{matrix.platform }}/${{ matrix.configuration }}/*.exe
        retention-days: 1 # <= 这里可以设置保留天数

    
    - name: Create artifact name file
      run: echo "winsparkle-binaries-${{ env.CONFIG_SHORT }}-${{ matrix.platform }}" > artifact_name_file-${{ env.CONFIG_SHORT }}-${{ matrix.configuration }}.txt

    - name: Upload artifact_name_file ${{ env.CONFIG_SHORT }}-${{ matrix.configuration }}
      uses: actions/upload-artifact@v4
      with:
        name: artifact_name_file-${{ env.CONFIG_SHORT }}-${{ matrix.configuration }}
        path: artifact_name_file-${{ env.CONFIG_SHORT }}-${{ matrix.configuration }}.txt
        retention-days: 1 # <= 这里可以设置保留天数


  create-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Install GitHub CLI
        uses: sersoft-gmbh/setup-gh-cli-action@v2

      - name: Delete existing release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete $RELEASE_DATE --yes || true

      - name: Create new release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Merge artifact names
        run: |
          find ./artifacts/artifact_name_* -type f -name "*.*" -exec cat {} + > merged_artifact_list.txt
          cat merged_artifact_list.txt

      - name: Compress Artifact Directories and Generate MD5
        run: |
          sed -i 's/\r$//' merged_artifact_list.txt
          > filelist.txt  # 清空或创建 filelist.txt 文件
          while IFS= read -r dir; do
            # Ensure the directory exists
            if [ -d "./artifacts/$dir" ]; then
              cd "./artifacts/$dir"
              zip -r "../${dir}.zip" ./*
              cd ../..
              
              # Calculate MD5 checksum
              md5sum="./artifacts/${dir}.zip" | awk '{ print \$1 }'
              
              # Write to filelist.txt
              echo "${dir}.zip | ${md5sum}" >> filelist.txt
            else
              echo "Directory ./artifacts/$dir does not exist."
            fi
          done < merged_artifact_list.txt
      # - name: Compress Artifact Directories
      #   run: |
      #     sed -i 's/\r$//' merged_artifact_list.txt
      #     while IFS= read -r dir; do
      #     # Ensure the directory exists
      #     if [ -d "./artifacts/$dir" ]; then
      #     cd "./artifacts/$dir"
      #     zip -r "../${dir}.zip" ./*
      #     cd ../..
      #     else
      #     echo "Directory ./artifacts/$dir does not exist."
      #     fi
      #     done < merged_artifact_list.txt

      - name: List Zipped Files
        run: ls ./artifacts/

      - name: Upload Artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./artifacts
          gh release upload $RELEASE_DATE ./*.zip  
          gh release upload $RELEASE_DATE filelist.txt 

 
